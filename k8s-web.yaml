apiVersion: v1
kind: Namespace
metadata:
  name: std-java
  labels:
    name: std-java
---
apiVersion: v1
kind: Secret
metadata:
  name: db.secret
  namespace: std-java
type: Opaque
data:
  db_domain: cm0tMnplM2psandrOTZiY29waTQubXlzcWwucmRzLmFsaXl1bmNzLmNvbQ==
  db_user: azhzd2Vi 
  db_pwd: WXk0NTYxMjM=

# 需要注意所有这里存储的字符串都是加密的，在环境变量或者是挂载盘后就会自动解密
# 所谓的加密不是不可获取，只是获取稍微加了个门槛罢了
# 加密方法类似 echo -n "admin" | base64
# 如果对于当前加解密方法认为太简单，可以考虑 ack-kms-plugin的方式，将密钥放到kms服务之中
---
# db domai as external service

apiVersion: v1
kind: Service
metadata:
  name: rds-db-svc
spec:
  type: ExternalName
  externalName: "rm-2ze3jljwk96bcopi4.mysql.rds.aliyuncs.com"
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-web-svc
  labels:
    app: k8s-web
  namespace: std-java
  annotations:
    #service.beta.kubernetes.io/alibaba-cloud-loadbalancer-id: "${YOUR_LOADBALACER_ID}"
    service.beta.kubernetes.io/alibaba-cloud-loadbalancer-spec: "slb.s1.small"
    #service.beta.kubernetes.io/alicloud-loadbalancer-address-type: internet
    #service.beta.kubernetes.io/alicloud-loadbalancer-address-type: intranet
    service.beta.kubernetes.io/alibaba-cloud-loadbalancer-name: "k8s-web-svc-in-ack"
    #set slb master zone. for low latency
    service.beta.kubernetes.io/alibaba-cloud-loadbalancer-master-zoneid: "cn-beijing-j"
    #service.beta.kubernetes.io/alibaba-cloud-loadbalancer-protocol-port: "http:80"
    #service.beta.kubernetes.io/backend-type: "ecs"
spec:
  selector:
    app: k8s-web
  ports:
  - name: http
    port: 80 #集群内部服务之间访问的端口
    protocol: TCP
    targetPort: 8080 #容器本身暴露的端口，和dockerfile中的expose意思一样
  type: LoadBalancer  # slb
  #type: ClusterIP
  #externalTrafficPolicy: Local
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: k8s-ingress
  namespace: std-java
  annotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"  # 针对504错误，设置超时时间为600秒
spec:
  # ingressClassName: "public-ingress" # from 1.18
  rules:
    - host: k8s-web.c8cbbb54620274052be5ac0f932202e3a.cn-beijing.alicontainer.com
      # use your own domain as the host
      http:
        paths:
          - backend:
              service:
                name: k8s-web-svc
                port: 
                  number: 80
            path: /
            pathType: Prefix
---
apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: k8s-web
  namespace: std-java
  labels:
    app: k8s-web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: k8s-web
  template:
    metadata:
      annotations:
        ahasPilotAutoEnable: 'on'  #启用ahas  serverless集群暂时不支持该方法
        ahasAppName: k8s-web-ahas  #ahas里的应用名
        ahasNamespace: "production"
        armsPilotAutoEnable: 'on'  #启用arms serverless集群暂时不支持该方法
        armsPilotCreateAppName: k8s-web-arms #arms里的应用名
        msePilotAutoEnable: "on"
        msePilotCreateAppName: "k8s-web-mse"
        alibabacloud.com/burst-resource: eci
        k8s.aliyun.com/eci-image-cache: "true"  #自动镜像
      labels:
        app: k8s-web
    spec:
      hostAliases:  # 设置pod的 /etc/hosts信息
        - hostnames:
          - "foo.local"
          ip:
            127.0.0.1
      #hostNetwork: false
      # since 1.21. az balancer. do not scheduler when cannot balancer
      topologySpreadConstraints:
        - maxSkew: 2 # balancer 允许的误差
          topologyKey: topology.kubernetes.io/zone  #以az作为桶
          whenUnsatisfiable: DoNotSchedule
          labelSelector: 
            matchLabels:
              app: k8s-web
      terminationGracePeriodSeconds: 60
      containers:
      - name: k8s-web
        image: second-instance-registry-vpc.cn-beijing.cr.aliyuncs.com/first_ns/k8s-web:dragonwell-v2
        ports:
        - name: http
          containerPort: 8080
          # hostPort: 80
        securityContext: 
          runAsNonRoot: true  # 要求container内启动命名的账号非root
        startupProbe:
          periodSeconds: 10
          failureThreshold: 20 # 判定为失败重启
          httpGet:
            port: 8080
            path: /liveness/check
            scheme: HTTP
          initialDelaySeconds: 30 # time after start container 即预期的程序启动时间
          timeoutSeconds: 1
        livenessProbe:
          periodSeconds: 20
          failureThreshold: 10 # 判定为失败重启
          httpGet:
            port: 8080
            path: /liveness/check
            scheme: HTTP
          initialDelaySeconds: 200 # time after start container 即预期的程序启动时间
          timeoutSeconds: 1
        readinessProbe:
          periodSeconds: 10 # 默认值就是10秒，可以不设置
          failureThreshold: 10 # 共检查3次，间隔10秒钟 ； 判定为失败，摘除endpoint，不再有流量进来。
          httpGet:
            port: 8080
            path: /readiness/check
            scheme: HTTP
          initialDelaySeconds: 40
          timeoutSeconds: 1
        lifecycle:
          preStop:
            exec:
              command: ["sleep","20"]
        resources:
          requests:
            cpu: 1
            memory: 4000Mi
          limits:
            cpu: 1
            memory: 4000Mi
        env:
          - name: msg
            value: from terway
          - name: TZ
            value: Asia/Shanghai
          - name: db_domain
            value: "rds-db-svc"
            #  secretKeyRef:
            #    name: db.secret
            #    key: db_domain
          - name: db_user
            valueFrom:
              secretKeyRef:
                name: db.secret
                key: db_user
          - name: db_pwd
            valueFrom:
              secretKeyRef:
                name: db.secret
                key: db_pwd
        ######### 配置 环境变量 ###########  仅需要如下配置环境变量即可，注意开头必须是“aliyun_logs_”开头。其中 test-stdout 和 test-file可以自己定制
          - name: aliyun_logs_applog
            value: stdout
          - name: aliyun_logs_test-file
            value: /logs/file*
        ######### 配置vulume mount #######
        volumeMounts:
        - name: volume-sls
          mountPath: /logs
      volumes:
      - name: volume-sls
        emptyDir: {}
  minReadySeconds: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
# ---
# apiVersion: policy/v1beta1
# kind: PodSecurityPolicy
# metadata:
#   name: sysctl-psp
# spec:
#   allowedUnsafeSysctls:
#   - net.ipv4.*
---
apiVersion: scheduling.alibabacloud.com/v1alpha1
kind: ResourcePolicy
metadata:
  name: k8s-web-elastic-policy
  namespace: std-java
spec:
  selector: # 此处不写就是当前命名空间下所有的pod都按照这个规则来进行弹缩
    app: k8s-web # 此处要与后续创建的Pod的label相关联。
  strategy: prefer
  units:
  - resource: ecs
    nodeSelector:
      paidtype: subscription
  - resource: ecs
    nodeSelector:
      paidtype: pay-as-you-go
  - resource: eci
  
